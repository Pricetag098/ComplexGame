
#pragma kernel PlaceVertex
#include "\Includes\MarchTables.compute"

float _scale;
float _cutoff;
RWTexture3D<float> Map;
uint scale;
RWStructuredBuffer<float3> Vertices;
RWStructuredBuffer<int> Tris;

static float3 nodePositions[12] =
{
    float3(.5f, 0, 0),
    float3(1, 0, .5f),
    float3(.5f, 0, 1),
    float3(0, 0, .5f),
    float3(.5f, 1, 0),
    float3(1, 1, .5f),
    float3(.5f, 1, 1),
    float3(0, 1, .5f),
    float3(0, .5f, 0),
    float3(1, .5f, 0),
    float3(1, .5f, 1),
    float3(0, .5f, 1)

};



int to1D(int x, int y, int z)
{
    return (z * (scale) * (scale)) + (y * (scale)) + x;
}
[numthreads(8, 8, 8)]
void PlaceVertex(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= scale || id.y >= scale || id.z >= scale)
    {
        return;
    }
    
    
    int cubeindex = 0;
    if (Map[id.xyz + int3(0, 0, 0)] < _cutoff)
        cubeindex |= 1;                 
    if (Map[id.xyz + int3(1, 0, 0)] < _cutoff)
        cubeindex |= 2;                 
    if (Map[id.xyz + int3(1, 0, 1)] < _cutoff)
        cubeindex |= 4;                 
    if (Map[id.xyz + int3(0, 0, 1)] < _cutoff)
        cubeindex |= 8;                 
    if (Map[id.xyz + int3(0, 1, 0)] < _cutoff)
        cubeindex |= 16;                
    if (Map[id.xyz + int3(1, 1, 0)] < _cutoff)
        cubeindex |= 32;                
    if (Map[id.xyz + int3(1, 1, 1)] < _cutoff)
        cubeindex |= 64;                
    if (Map[id.xyz + int3(0, 1, 1)] < _cutoff)
        cubeindex |= 128;
    //cubeindex = 4;
    
    int triTableVal[16] = triangulation[cubeindex];
    
    for (int i = 0; i < 12; i++)
    {
        Vertices[(to1D(id.x, id.y, id.z) * 12) + i] = (nodePositions[i] + float3((float)id.x, (float)id.y, (float)id.z)) * _scale;
    }
    
    for (int j = 0; j < 16; j++)
    {
        int triIndex = triTableVal[j];
        if (triIndex == -1)
            triIndex = 0;
        Tris[to1D(id.x, id.y, id.z)];

    }
    

}



