
#pragma kernel Triangulate
#include "\Includes\MarchTables.compute"


float _cutoff;

int scale;
struct Triangle
{
    float3 a;
    float3 b;
    float3 c;
};


RWStructuredBuffer<float4> points;
AppendStructuredBuffer<Triangle> Tris;



float3 interpolateVerts(float4 v1, float4 v2) {
    float t = (_cutoff - v1.w) / (v2.w - v1.w);
    return v1.xyz + t * (v2.xyz-v1.xyz);
}

int to1D(int x, int y, int z)
{
    return (z * (scale) * (scale)) + (y * (scale)) + x;
}


[numthreads(8, 8, 8)]
void Triangulate(uint3 id : SV_DispatchThreadID)
{
    if(id.x >= scale-1 || id.y >= scale-1 || id.z >= scale-1){
        return;
    }

    float4 cubeCorners[8] = 
    {
        points[to1D(id.x    ,id.y    ,id.z    )],
        points[to1D(id.x + 1,id.y    ,id.z    )],
        points[to1D(id.x + 1,id.y    ,id.z + 1)],
        points[to1D(id.x    ,id.y    ,id.z + 1)],
        points[to1D(id.x    ,id.y + 1,id.z    )],
        points[to1D(id.x + 1,id.y + 1,id.z    )],
        points[to1D(id.x + 1,id.y + 1,id.z + 1)],
        points[to1D(id.x    ,id.y + 1,id.z + 1)]
    };

    int cubeIndex = 0;
    if(cubeCorners[0].w < _cutoff) cubeIndex |= 1;
    if(cubeCorners[1].w < _cutoff) cubeIndex |= 2;
    if(cubeCorners[2].w < _cutoff) cubeIndex |= 4;
    if(cubeCorners[3].w < _cutoff) cubeIndex |= 8;
    if(cubeCorners[4].w < _cutoff) cubeIndex |= 16;
    if(cubeCorners[5].w < _cutoff) cubeIndex |= 32;
    if(cubeCorners[6].w < _cutoff) cubeIndex |= 64;
    if(cubeCorners[7].w < _cutoff) cubeIndex |= 128;

    for(int i = 0; triangulation[cubeIndex][i] != -1; i+=3)
    {
        int    point0a = cornerIndexAFromEdge[triangulation[cubeIndex][i]];
        int    point0b = cornerIndexAFromEdge[triangulation[cubeIndex][i]];
        float3 point0 = interpolateVerts(cubeCorners[point0a],cubeCorners[point0b]);

        int    point1a = cornerIndexAFromEdge[triangulation[cubeIndex][i+1]];
        int    point1b = cornerIndexAFromEdge[triangulation[cubeIndex][i+1]];
        float3 point1 = interpolateVerts(cubeCorners[point1a],cubeCorners[point1b]);

        int    point2a = cornerIndexAFromEdge[triangulation[cubeIndex][i+2]];
        int    point2b = cornerIndexAFromEdge[triangulation[cubeIndex][i+2]];
        float3 point2 = interpolateVerts(cubeCorners[point2a],cubeCorners[point2b]);

        Triangle t;
        t.a = point0;
        t.b = point1;
        t.c = point2;

        Tris.Append(t);

    }


}



