// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel GenMap


#include "Packages/jp.keijiro.noiseshader/Shader/SimplexNoise2D.hlsl"
#include "Packages/jp.keijiro.noiseshader/Shader/SimplexNoise3D.hlsl"

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture

float freq;
float amp;
float la;
float3 offset;
float per;
float size;
int octaves;
float power;
uint scale;

RWTexture3D<half> Map;

int to1D(int x, int y, int z)
{
    return (z * scale * scale) + (y * scale) + x;
}

int3 to3D(int idx)
{
    int z = idx / (scale * scale);
    idx -= (z * scale * scale);
    int y = idx / scale;
    int x = idx % scale;
    return int3 (x, y, z);
}

[numthreads(8, 8, 8)]
void GenMap(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= scale || id.y >= scale || id.y >= scale)
    {
        return;
    }
    float3 coords = (float3)id.xyz + offset;
    // TODO: insert actual code here!
    float val = 0;

    float f = freq;
    float a = amp;
    for (int i = 0; i < octaves; i++)
    {
        val += ((SimplexNoise(coords.xyz * f)+1)/2) * a;
        f *= la;
        a *= per;
    }
    
    Map[id.xyz] -= val * power * (1.0 - (coords.y / (float)scale));
}


